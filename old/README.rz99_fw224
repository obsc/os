Rene Zhang - rz99
Fukang Wen - fw224

Implementation details of Project 3 for CS4411 - Fall 2014
================================================================================
Minimsg

minimsg.h
  - added minimsg_handle for the network handler to call
minimsg.c
  - minimsg_handle assumes interrupts are disabled
  - minimsg_handle does sanity checks, and enqueues the network_interrupt_arg_t
    onto the correct port (dropped if port isn't made yet)

  - two arrays for unbound and bound ports, with a mutex of each
  - unbound port has a queue for data, with a lock on the queue and a counting
    semaphore for receiving threads to wait on

  - create_bound and create_unbound return NULL on failure
  - create_bound fails when all bound ports are taken up and takes O(1) time
    for the first iteration through the array

  - when destroying an unbound port, all data enqueued onto the queue is
    automatically freed.

  - send and receive have failure returns of -1
  - send fails on null inputs, msg too large, or failure to malloc a header
  - send assumes network_send_pkt sends whole packet (all or nothing). If
    network_send_pkt fails, we assume nothing was sent, otherwise we assume
    the whole packet was sent

  - In receive, if payload is too large, we only memcpy the buffer size (*len).
  - If we fail to construct a bound port for replies, we return -1 but have a
    *len representing how much we copied.
  - constructs the reply bound port with the source address in the header
  - receive frees the network_interrupt_arg_t

================================================================================
Minithread

minithread.c
  - Added initializing network and minimsgs
  - Added network_handler

================================================================================
Test cases

network_port_stress_test
  - Creates enough ports to overflow the max number of unbound and bound ports
    and then destroy them. Stress tests the creation of ports and
    overflow behavior.
network_send_test
  - Sends a message to an uncreated port. Then, create the port and listen on it.
  - Expects the message to be dropped.
network_send_test2
  - Sends two messages to three receiving threads. Tests for the order in which
    the messages are received, (a,b,c waiting for messages, a,b will get them).
network_send_test3
  - Sends a message to a port. Then, delete the port and create it again.
  - In this case, the message should be dropped.

network_load_test
  - This tests heavy loads on the same port in a network
  - Receiver spawns 1000 threads and receives on the same unbound port number
  - Sender spawns 1 thread and sends 1000 messages (with 1 millisecond sleep)
  - Expects that we send all 1000 eventually and receive all 1000 with no loss 

network_forward
  - This forwards messages from one computer to another
  - Forwards all incoming traffic to a user defined hostname
  - Interfaces directly with network5, receives messages sent by network5 and
    sends to hostname

================================================================================

