Rene Zhang - rz99
Fukang Wen - fw224

Implementation details of Project 6 for CS4411 - Fall 2014
================================================================================
DID NOT IMPLEMENT
  - Our file system does not handle disk crashes and failures

================================================================================
Important Design Decisions
  - We have concurrency on the block level. Each block can only have 1 thread
  making requests to it at a time.
  - We start a new thread to handle initializing the disk because we read.
  the superblock and that requires us to semaphore_P (which the system thread
  cannot do). This new thread then forks the original main thread with its arg.
  - Ignored data_interrupt_t as it was incompatible with install_disk_handler
  - We use exactly 10% of the blocks as inodes, we floor it if given not a
  multiple of 10.
  - We use uthash.h for our hashtables (see @500 on piazza for instr answer).

================================================================================
MKFS
  - Our disk name is MINIFILESYSTEM
  - Our mkfs is run sequentially: it writes 1 block at a time and waits until
  the disk notifies that the block has completed writing
  - Because of this, ./mkfs 1000 takes several minutes to run
  - Our mkfs does not work for anything less than disk size 10. This is because
  we have 10% of the blocks be inodes, so anything less than size 10 will be
  unable to construct a root inode.

================================================================================
Shell.c
  - We changed gets(arg) to fgets(arg, BUFFER_SIZE, stdin)
    - see piazza 510
  - We allow the capture of ^A and ^D for the termination of input
    - see piazza 534

================================================================================

