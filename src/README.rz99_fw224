Rene Zhang - rz99
Fukang Wen - fw224

Implementation details of Project 5 for CS4411 - Fall 2014
================================================================================
Important Design Decisions
  - The cache is implemented as a FIFO cache. This is chosen over alternatives
  like LRU cache because FIFO lends itself better to our case of getting rid
  of paths that are "stale" (in the cache for more than 3 seconds).
  - We double the amount of "buckets" in the hashtable than the max amount
  specified by the user to reduce collision for small numbers.

================================================================================
Miniroute

================================================================================
Cache
  - A cache implemented using a doubly linked list and a hashtable.
  - The cache associates network_address_t with a void * (pointer to some struct)
  that the user specifies.
  - We introduce a tuple holding (key, value, list node, hashtable node) so that
  the doubly linked list has a direct pointer to the item in the hashtable and
  vice versa. This is so we can perform all the necessary constant time
  operations in the cache.
  - The hashtable is a fixed sized array holding a specified number of doubly
  linked lists. We use chaining to deal with collisions.
  - We create twice as many "buckets" in the hashtable as the size given by the user 
  in order to reduce collision for small numbers.

================================================================================
List
  - A doubly linked list implementation
  - This is private use for the cache, because we need a list implementation
  that performs delete in O(1) (which the current queue does not support)
================================================================================
Test cases

cache_test
  - Unit test for cache interface
================================================================================

